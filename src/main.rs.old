extern crate gdal;
use std::env;
use gdal::errors::GdalError;
use std::fmt;

struct RasterInt32 {
    width: usize,
    height: usize,
    data: Vec<i32>,
    no_data: Option<i32>,
    geo_transform: [f64; 6],
}

impl RasterInt32 {
    // Static method
    pub fn read(path: &str) -> Result<RasterInt32, GdalError> {
        let dataset = gdal::Dataset::open(path)?;
        let (width, height) = dataset.raster_size();
        let geo_transform = dataset.geo_transform()?;
        
        let band = dataset.rasterband(1)?;
        let buffer = band.read_as::<i32>((0, 0), (width, height), (width, height), None)?;
        let data = buffer.data;
        let no_data = None; // Fill this with your actual no_data value if applicable.
        
        Ok(RasterInt32 {
            width,
            height,
            data,
            no_data,
            geo_transform,
        })
    }


    pub fn display_grid(&self) {
        for y in 0..self.height {
            for x in 0..self.width {
                let index = y * self.width + x;
                print!("{:<4} ", self.data[index]);
            }
            println!();
        }
    }
}

impl fmt::Display for RasterInt32 {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let no_data_str = match self.no_data {
            Some(value) => value.to_string(),
            None => "-".to_string(),
        };
        write!(f, "Raster: {} x {}\nTransform: {:?}\nNo Data: {}", self.width, self.height, self.geo_transform, no_data_str)
    }
}


fn main() -> Result<(), GdalError> {
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        eprintln!("Usage: {} <path_to_geotiff>", args[0]);
        std::process::exit(1);
    }

    let path = &args[1];

    let raster = RasterInt32::read(path)?;

    println!("{}", raster);
    raster.display_grid();

    Ok(())
}
